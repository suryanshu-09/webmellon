// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Catalogue {
  id       Int       @id @default(autoincrement())
  name     String
  websites Website[]
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name], name: "user_catalogue_name_unique")
}

model Website {
  id          Int       @id @default(autoincrement())
  userId      String
  catalogueId Int
  name        String
  url         String
  favicon     String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  catalogue   Catalogue @relation(fields: [catalogueId], references: [id], onDelete: Cascade)

  @@unique([userId, name], name: "user_website_name_unique")
  @@unique([userId, url], name: "user_website_url_unique")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  catalogues    Catalogue[]
  websites      Website[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

generator zod {
  provider = "zod-prisma-types"
  output   = "./zod"
}
